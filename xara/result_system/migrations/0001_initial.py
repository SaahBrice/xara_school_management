# Generated by Django 5.1 on 2024-09-05 13:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import result_system.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('S', 'Secretary'), ('T', 'Teacher')], max_length=1)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=9)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('address', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('website', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('qualifications', models.TextField(blank=True)),
                ('date_joined', models.DateField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.PositiveIntegerField(default=3000)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='result_system.academicyear')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='result_system.school')),
                ('class_master', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mastered_classes', to='result_system.teacher')),
            ],
            options={
                'verbose_name_plural': 'Classes',
            },
        ),
        migrations.CreateModel(
            name='ClassSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit', models.DecimalField(decimal_places=1, max_digits=3)),
                ('max_students', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('is_active', models.BooleanField(default=True)),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='result_system.class')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=False)),
                ('max_score', models.DecimalField(decimal_places=2, default=20.0, max_digits=4)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='result_system.academicyear')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='result_system.school')),
            ],
            options={
                'unique_together': {('school', 'name', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='GeneralExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('total_coefficient', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exams', to='result_system.academicyear')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralExamWeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result_system.exam')),
                ('general_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result_system.generalexam')),
            ],
            options={
                'unique_together': {('general_exam', 'exam')},
            },
        ),
        migrations.AddField(
            model_name='generalexam',
            name='exams',
            field=models.ManyToManyField(related_name='general_exams', through='result_system.GeneralExamWeight', to='result_system.exam'),
        ),
        migrations.AddField(
            model_name='generalexam',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exams', to='result_system.school'),
        ),
        migrations.AddField(
            model_name='academicyear',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_years', to='result_system.school'),
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='result_system.school'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('matricula_code', models.CharField(max_length=15, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('address', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('parent_name', models.CharField(blank=True, max_length=200)),
                ('parent_contact', models.CharField(blank=True, max_length=20)),
                ('parent_email', models.EmailField(blank=True, max_length=254)),
                ('parent_address', models.TextField(blank=True)),
                ('date_enrolled', models.DateField(default=django.utils.timezone.now)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='student_pictures/')),
                ('is_active', models.BooleanField(default=True)),
                ('results_access_payed', models.BooleanField(default=False)),
                ('results_access_date_payed', models.DateField(blank=True, null=True)),
                ('results_access_phone_number_payed', models.CharField(blank=True, max_length=20)),
                ('current_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_students', to='result_system.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='result_system.school')),
            ],
            options={
                'permissions': [('can_view_student_grades', 'Can view student grades'), ('can_edit_student_grades', 'Can edit student grades')],
            },
        ),
        migrations.CreateModel(
            name='GradeSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('credits_attempted', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('credits_obtained', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('average', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('remark', models.CharField(blank=True, max_length=20)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_sheets', to='result_system.academicyear')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_sheets', to='result_system.class')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_sheets', to='result_system.exam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_sheets', to='result_system.student')),
            ],
        ),
        migrations.CreateModel(
            name='GeneralExamGradeSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('average', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('remark', models.CharField(blank=True, max_length=20)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_grade_sheets', to='result_system.academicyear')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_grade_sheets', to='result_system.class')),
                ('general_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_sheets', to='result_system.generalexam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_grade_sheets', to='result_system.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('BIRTH_CERT', 'Birth Certificate'), ('ID_CARD', 'ID Card'), ('PREV_REPORT', 'Previous Report Card'), ('OTHER', 'Other')], max_length=20)),
                ('file', models.FileField(upload_to='student_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png']), result_system.models.validate_file_size])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='result_system.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result_system.academicyear')),
                ('class_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_subjects', to='result_system.classsubject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolled_subjects', to='result_system.student')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('default_credit', models.DecimalField(decimal_places=1, default=1.0, max_digits=3, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(20.0)])),
                ('description', models.TextField(blank=True)),
                ('subject_type', models.CharField(choices=[('MANDATORY', 'Mandatory'), ('ELECTIVE', 'Elective')], default='MANDATORY', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='result_system.school')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='classsubject',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='result_system.subject'),
        ),
        migrations.CreateModel(
            name='SubjectGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('exam_taken', models.BooleanField(default=False)),
                ('observation', models.CharField(blank=True, max_length=50)),
                ('class_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_grades', to='result_system.classsubject')),
                ('grade_sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_grades', to='result_system.gradesheet')),
            ],
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_initials', models.CharField(help_text='Used for generating student codes', max_length=10)),
                ('academic_year_format', models.CharField(default='YYYY-YYYY', help_text='Format for academic year', max_length=20)),
                ('max_students_per_class', models.PositiveIntegerField(default=3000)),
                ('grading_system', models.JSONField(default=dict, help_text='\n        JSON representation of the grading system. Example:\n        {\n            "A": {"min": 16, "max": 20, "description": "Excellent"},\n            "B": {"min": 14, "max": 15.99, "description": "Very Good"},\n            "C": {"min": 12, "max": 13.99, "description": "Good"},\n            "D": {"min": 10, "max": 11.99, "description": "Average"},\n            "E": {"min": 0, "max": 9.99, "description": "Fail"}\n        }\n        ')),
                ('default_pass_mark', models.DecimalField(decimal_places=2, default=10.0, max_digits=4)),
                ('school', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='result_system.school')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateField(default=django.utils.timezone.now)),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result_system.class')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result_system.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_assignments', to='result_system.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='ClassStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('min_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('avg_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('num_sat', models.PositiveIntegerField()),
                ('num_passed', models.PositiveIntegerField()),
                ('percentage_passed', models.DecimalField(decimal_places=2, max_digits=5)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_statistics', to='result_system.academicyear')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_statistics', to='result_system.class')),
                ('class_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_statistics', to='result_system.classsubject')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_statistics', to='result_system.exam')),
            ],
            options={
                'unique_together': {('exam', 'class_obj', 'class_subject', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='GeneralExamClassStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('min_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('avg_score', models.DecimalField(decimal_places=2, max_digits=4)),
                ('num_students', models.PositiveIntegerField()),
                ('num_passed', models.PositiveIntegerField()),
                ('percentage_passed', models.DecimalField(decimal_places=2, max_digits=5)),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_class_statistics', to='result_system.class')),
                ('class_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_statistics', to='result_system.classsubject')),
                ('general_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_statistics', to='result_system.generalexam')),
            ],
            options={
                'unique_together': {('general_exam', 'class_obj', 'class_subject')},
            },
        ),
        migrations.CreateModel(
            name='GeneralExamOverallStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_students', models.PositiveIntegerField()),
                ('num_passes', models.PositiveIntegerField()),
                ('class_average', models.DecimalField(decimal_places=2, max_digits=4)),
                ('overall_percentage_pass', models.DecimalField(decimal_places=2, max_digits=5)),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_overall_statistics', to='result_system.class')),
                ('general_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_statistics', to='result_system.generalexam')),
            ],
            options={
                'unique_together': {('general_exam', 'class_obj')},
            },
        ),
        migrations.CreateModel(
            name='GeneralExamSubjectGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_score', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('observation', models.CharField(blank=True, max_length=50)),
                ('class_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_exam_grades', to='result_system.classsubject')),
                ('grade_sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_grades', to='result_system.generalexamgradesheet')),
            ],
            options={
                'unique_together': {('grade_sheet', 'class_subject')},
            },
        ),
        migrations.CreateModel(
            name='OverallStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_students', models.PositiveIntegerField()),
                ('num_passes', models.PositiveIntegerField()),
                ('class_average', models.DecimalField(decimal_places=2, max_digits=4)),
                ('overall_percentage_pass', models.DecimalField(decimal_places=2, max_digits=5)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_statistics', to='result_system.academicyear')),
                ('class_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_statistics', to='result_system.class')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_statistics', to='result_system.exam')),
            ],
            options={
                'unique_together': {('exam', 'class_obj', 'academic_year')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='generalexam',
            unique_together={('school', 'name', 'academic_year')},
        ),
        migrations.AddIndex(
            model_name='academicyear',
            index=models.Index(fields=['school', 'is_current'], name='result_syst_school__bef2c0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='academicyear',
            unique_together={('school', 'year')},
        ),
        migrations.AddIndex(
            model_name='gradesheet',
            index=models.Index(fields=['student', 'exam', 'class_obj', 'academic_year'], name='result_syst_student_d3f24a_idx'),
        ),
        migrations.AddIndex(
            model_name='gradesheet',
            index=models.Index(fields=['average'], name='result_syst_average_030336_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='gradesheet',
            unique_together={('student', 'exam', 'class_obj', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='generalexamgradesheet',
            unique_together={('student', 'general_exam', 'class_obj', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='studentsubject',
            unique_together={('student', 'class_subject', 'academic_year')},
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together={('school', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='classsubject',
            unique_together={('class_obj', 'subject')},
        ),
        migrations.AddIndex(
            model_name='subjectgrade',
            index=models.Index(fields=['grade_sheet', 'class_subject'], name='result_syst_grade_s_f62a20_idx'),
        ),
        migrations.AddIndex(
            model_name='subjectgrade',
            index=models.Index(fields=['score'], name='result_syst_score_b42d2f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectgrade',
            unique_together={('grade_sheet', 'class_subject')},
        ),
        migrations.AlterUniqueTogether(
            name='teachersubject',
            unique_together={('teacher', 'subject', 'class_obj')},
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('school', 'name', 'academic_year')},
        ),
    ]
